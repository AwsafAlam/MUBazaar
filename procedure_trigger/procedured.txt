-- MOVIE_SEARCH

DELIMITER //
CREATE OR REPLACE PROCEDURE MOVIE_SEARCH(IN SEARCH_KEY VARCHAR(255))
BEGIN
		SELECT * FROM movie WHERE LOWER(name) LIKE CONCAT(SEARCH_KEY,'%') ORDER by name ASC;
END//
DELIMITER ;







-- TOP_CUSTOMERS
DELIMITER //
CREATE OR REPLACE PROCEDURE TOP_CUSTOMERS(IN N INT)
BEGIN
	SELECT * FROM customer C1 WHERE N > (SELECT COUNT(*) FROM customer C2 WHERE C2.point > C1.point) ORDER BY C1.point DESC;
END//
DELIMITER ;



DELIMITER //
CREATE OR REPLACE PROCEDURE PRODUCT_SOLD_LIST_FROM_CATEGORY(IN N INT(11), IN TABLE_NAME VARCHAR(255), IN GREATER_OR_LESSER VARCHAR(255))
BEGIN
	IF GREATER_OR_LESSER = 'greater' THEN
		SET @t1 =CONCAT('SELECT sub_category, name, price, item_sold FROM ',TABLE_NAME, ' WHERE item_sold', '>', N);
	ELSE
		SET @t1 =CONCAT('SELECT sub_category, name, price, item_sold FROM ',TABLE_NAME, ' WHERE item_sold', '<', N);
	END IF;
	
	PREPARE stmt3 FROM @t1;
	EXECUTE stmt3;
	DEALLOCATE PREPARE stmt3;
		
END//
DELIMITER ;



-- SUBSCRIBER_ENTRY_CHECK

DELIMITER //
CREATE OR REPLACE FUNCTION SUBSCRIBER_ENTRY_CHECK(GIVEN_EMAIL VARCHAR(255)) RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE X VARCHAR(255);
	SET X ="";
	SELECT email INTO X FROM movie_subscriber WHERE email = GIVEN_EMAIL;
	IF X != "" THEN
		RETURN ('TRUE');
	ELSE 
		RETURN ('FALSE');
	END IF;

END//
DELIMITER ;







